/*
 *
 * Copyright (c) ISBAN: Ingenieria de Software Bancario, S.L.
 * All rights reserved.
 *
 */
package calypsox.tk.report;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import org.apache.commons.lang3.StringUtils;

import calypsox.util.collateral.CollateralUtilities;

import com.calypso.tk.core.LegalEntity;
import com.calypso.tk.refdata.CollateralConfig;
import com.calypso.tk.refdata.CollateralConfigCurrency;
import com.calypso.tk.report.LegalEntityReportStyle;
import com.calypso.tk.report.ReportRow;

/*
 * This is an extension to the default Calypso report, adding few extra columns
 */
public class IBORCollateralConfigReportStyle extends CollateralConfigReportStyle {

    /**
     * Autogenerated serial UID.
     */
    private static final long serialVersionUID = 8286222040330862960L;
    //NewColumns
    public static final String ELEGIBLE_CURRENCIES = "ELEGIBLE_CURRENCIES";
    public static final String TYPE_AGREEMENT = "Type of Agreement";
    public static final String INDEX = "INDEX";
    
    private static final Set<String> tradeLegalEntities = new HashSet();

    static {
        tradeLegalEntities.add("Legal Entity.");
        tradeLegalEntities.add("Processing Org.");
    }
    
    public IBORCollateralConfigReportStyle() {
        super();
    }

    @Override
    public Object getColumnValue(ReportRow row, String columnName, Vector errors) {
        if (row == null) {
            return null;
        }
        CollateralConfig config = row.getProperty("MarginCallConfig");
        if (config == null) {
            return null;
        }
       
        if (ELEGIBLE_CURRENCIES.equals(columnName)) {
        	List<CollateralConfigCurrency> currencies =  config.getEligibleCurrencies();
        	String result = "";
        	for(CollateralConfigCurrency curr : currencies){
        		result = result + curr.getCurrency() + ",";
        	}
        	if(null!=currencies && currencies.size()>0){
        		result = result.substring(0,result.length()-1);
        	}
        	return result;
        }
        if (TYPE_AGREEMENT.equals(columnName)) {
        	 String comment = "";
        	 String maType = config.getAdditionalField("MASTER_AGREEMENT_TYPE");
        	 if(StringUtils.isNotBlank(maType)){
        		 comment = CollateralUtilities.getDomainValueComment("mccAdditionalField.MASTER_AGREEMENT_TYPE", maType);
        	 }
        	 return comment;
        }
        
        if (INDEX.equals(columnName)) {
        	String result = "";
	       	Object indexNameObj = row.getProperty(INDEX);
	       	if(null!=indexNameObj){
	       		result = indexNameObj.toString();
	       	}
        	return result;
        }
       
        return getValue(row, columnName, errors);
    }
    
    private Object getValue(ReportRow row, String columnName, Vector errors) {
        Object value = super.getColumnValue(row, columnName, errors);
        if (value == null) {
            for (Object lePrefix : tradeLegalEntities) {
                String prefix;
                LegalEntityReportStyle leReportStyle = this.getLegalEntityStyle();
                if (!isLegalEntityColumn(prefix = (String) lePrefix, columnName)) {
                }
                LegalEntity le = CollateralConfigReportStyle.getLegalEntity(prefix,
                        (CollateralConfig) row.getProperty("MarginCallConfig"));
                if (le == null) {
                    return "";
                }
                value = leReportStyle.getColumnValue(le, prefix, row, columnName, errors);
            }
        }
        return value;
    }
}
