/*
 *
 * Copyright (c) ISBAN: Ingenieria de Software Bancario, S.L.
 * All rights reserved.
 *
 */
package calypsox.tk.report;

import java.util.Vector;

import calypsox.util.collateral.CollateralUtilities;

import com.calypso.tk.core.CalypsoServiceException;
import com.calypso.tk.core.Log;
import com.calypso.tk.refdata.Account;
import com.calypso.tk.refdata.AccountInterestConfig;
import com.calypso.tk.refdata.AccountInterestConfigRange;
import com.calypso.tk.refdata.CollateralConfig;
import com.calypso.tk.report.DefaultReportOutput;
import com.calypso.tk.report.ReportOutput;
import com.calypso.tk.report.ReportRow;
import com.calypso.tk.report.ReportTemplate;
import com.calypso.tk.service.DSConnection;

/**
 * 
 * @author XI336535
 *
 */
public class IBORCollateralConfigReport extends com.calypso.tk.report.CollateralConfigReport{

    /**
     * Autogenerated serial UID.
     */
    private static final long serialVersionUID = 8286222040330862960L;

    public static final int CERO=0;
    public static final int TAM_DELETE = 6;
    private static final String DEFAULT_HOL = "TARGET";
    
    public ReportOutput load(Vector errorMsgs) {
    	ReportTemplate  template = super.getReportTemplate();
    	Vector<String> holidays = getDefaultHoliday(template,DEFAULT_HOL);
    	template.setHolidays(holidays);
    	super.setReportTemplate(template);
    	final DefaultReportOutput output = (DefaultReportOutput) super.load(
                errorMsgs);
    	
    	try {
			Vector<Account> accounts = DSConnection.getDefault().getRemoteAccounting().getAccounts(true);
			 for (int i = CERO; i < output.getRows().length; i++) {
				 boolean hasIndexName = false;
		         final ReportRow row = output.getRows()[i];
		         CollateralConfig config = row.getProperty("MarginCallConfig");
		         if (config != null) {
		        	String configName = config.getName();
		       	 	Vector<AccountInterestConfig> accIntConfigs = new Vector<AccountInterestConfig>();
					
					if(null!=accounts && accounts.size()>CERO){
						for(Account account:accounts){
							String callAccName = account.getExternalName();
							int inxCadena = CERO;
							if(!account.getCurrency().equals("ANY")){
								inxCadena = TAM_DELETE;
							}
							if(null!=callAccName && !callAccName.isEmpty()){
								if(inxCadena>CERO && callAccName.length()>TAM_DELETE){
									callAccName = callAccName.substring(CERO,callAccName.length()-inxCadena);
								}
								if(configName.equalsIgnoreCase(callAccName)){
									int configId = null==account.getAccountInterests()?CERO:account.getAccountInterests().get(CERO).getConfigId();
									String where = "config_id="+ configId;
									if(configId!=CERO){
										accIntConfigs = DSConnection.getDefault().getRemoteAccounting().getAccountInterestConfigs(where);
										if(null!=accIntConfigs && accIntConfigs.size()>CERO){
											for(AccountInterestConfig accIntConfig: accIntConfigs){
								    			for (final AccountInterestConfigRange range : (Vector<AccountInterestConfigRange>) accIntConfig.getRanges()) {
								    				if(null!=range){
								    					String indexName = null==range.getRateIndex()?null:range.getRateIndex().toStringNoSource();
								    					if(null!=indexName){
									    					row.setProperty(IBORCollateralConfigReportStyle.INDEX, indexName);
									    					hasIndexName = true;
									    					break;
								    					}
								    				}
								    			}
								    			if(hasIndexName){
								    				break;
								    			}
											}
								    	}
									}
								}
							}
							if(hasIndexName){
			    				break;
			    			}
						}
					}
				}
			}
		}catch (CalypsoServiceException e) {
			Log.error(e,e);
		}
		 
		return output;
	}
    
    
    /**
	 * Get holiday of reportTemplate.
	 * If there is none get parameters holDefault.
	 *  
	 * @param template
	 * @param holDefault
	 * @return
	 */
	private Vector<String> getDefaultHoliday(ReportTemplate template, String holDefault) {
		String hol = template.get("Holidays");
    	Vector<String> holidays = new Vector<String>();
    	if(null!=hol && !hol.isEmpty()){
    		if(hol.contains("[")){
    			hol = hol.substring(1, hol.length());
    		}
    		if(hol.contains("]")){
    			hol = hol.substring(0, hol.length()-1);
    		}
    		String[] hols = hol.split(",");
    		for(int i=0;i<hols.length;i++){
    			holidays.add(hols[i]);
    		}
    	} else{
    		holidays.add(holDefault);
    	}
		return holidays;
	}

}
