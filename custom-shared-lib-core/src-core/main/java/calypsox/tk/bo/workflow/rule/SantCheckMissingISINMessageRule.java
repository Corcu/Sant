package calypsox.tk.bo.workflow.rule;

import calypsox.tk.report.SantMissingIsinUtil;
import com.calypso.tk.bo.BOMessage;
import com.calypso.tk.bo.BOTransfer;
import com.calypso.tk.bo.Task;
import com.calypso.tk.bo.TaskWorkflowConfig;
import com.calypso.tk.bo.workflow.WfMessageRule;
import com.calypso.tk.core.CalypsoServiceException;
import com.calypso.tk.core.Log;
import com.calypso.tk.core.Trade;
import com.calypso.tk.product.Repo;
import com.calypso.tk.refdata.CollateralConfig;
import com.calypso.tk.service.DSConnection;
import com.calypso.tk.service.collateral.CacheCollateralClient;
import com.calypso.tk.util.TaskArray;

import java.util.Collection;
import java.util.Optional;
import java.util.Vector;

//Project: MISSING_ISIN

/**
 * @author Diego Cano Rodr?guez <diego.cano.rodriguez@accenture.com>
 * @author Carlos Humberto Cejudo Bermejo <c.cejudo.bermejo@accenture.com >
 *
 */
public class SantCheckMissingISINMessageRule implements WfMessageRule {

	private static final String TRIPARTY_TRANSACTION_GROUP_REFERENCE = "TripartyTransactionGroupReference";

	@Override
	public String getDescription() {
		return "Checks if an MT569 message is requiring products that are missing in the system";
	}

	@Override
	public boolean check(TaskWorkflowConfig wc, BOMessage message, BOMessage oldMessage, Trade trade,
			BOTransfer transfer, Vector messages, DSConnection dsCon, Vector excps, Task task, Object dbCon,
			Vector events) {

		if (checkTripartyContract(message)) {
			Collection<Task> tasks = SantMissingIsinUtil.getInstance().createTasks(message);
			saveTasks(tasks);
		}

		return true;
	}

	@Override
	public boolean update(TaskWorkflowConfig wc, BOMessage message, BOMessage oldMessage, Trade trade,
			BOTransfer transfer, Vector messages, DSConnection dsCon, Vector excps, Task task, Object dbCon,
			Vector events) {

		return true;
	}

	/**
	 * Saves tasks generated by missing ISINs in the MT569 message.
	 * 
	 * @param tasks
	 *            Tasks to be saved
	 */
	private void saveTasks(Collection<Task> tasks) {
		try {
			TaskArray tasksToSave = new TaskArray();
			for (Task taskToSave : tasks) {
				tasksToSave.add(taskToSave);
			}
			if (tasksToSave.size() > 0) {
				DSConnection.getDefault().getRemoteBackOffice().saveAndPublishTasks(tasksToSave, 0, null);
			}
		} catch (CalypsoServiceException e) {
			String message = "Could not save MISSING_ISIN tasks";
			Log.error(this, message, e);
		}
	}

	/**
	 * @param message
	 * @return true if contract is Triparty
	 */
	private boolean checkTripartyContract(BOMessage message) {
		int contractId = 0;
		long repoTradeId = 0;
		final boolean isRepoTripartyMessage = Optional.ofNullable(message.getAttribute(SantMissingIsinUtil.MESSAGE_ATTRIBUTE_ISREPOTRIPARTY)).isPresent();
		try {
			if(isRepoTripartyMessage){
				repoTradeId = Optional.ofNullable(message.getAttribute(SantMissingIsinUtil.MESSAGE_ATTRIBUTE_CONTRACTID)).map(Long::parseLong).orElse(0L);
				final Trade repoTriparty = DSConnection.getDefault().getRemoteTrade().getTrade(repoTradeId);
				if(Optional.ofNullable(repoTriparty).map(Trade::getProduct).filter(Repo.class::isInstance).isPresent()){
					return true;
				}
			}else {
				contractId = Optional.ofNullable(message.getAttribute(SantMissingIsinUtil.MESSAGE_ATTRIBUTE_CONTRACTID)).map(Integer::parseInt).orElse(0);
				if (contractId > 0) {
					CollateralConfig contract = CacheCollateralClient.getCollateralConfig(DSConnection.getDefault(),
							contractId);
					if (null != contract) {
						return true;
					}
				}
			}
		} catch (NumberFormatException e) {
			Log.error(this, "Error parsing contract id from message: " + message.getLongId());
		} catch (Exception e) {
			Log.error(this, "Error loading contract: " + contractId);
		}

		return false;
	}
}
