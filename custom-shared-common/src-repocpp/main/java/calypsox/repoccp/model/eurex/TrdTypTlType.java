//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.09.29 at 03:45:16 PM BST 
//


package calypsox.repoccp.model.eurex;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for trdTypTlType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="trdTypTlType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;maxLength value="20"/>
 *     &lt;enumeration value="EXERCISE"/>
 *     &lt;enumeration value="ASSIGNMENT"/>
 *     &lt;enumeration value="NOTIFICATION"/>
 *     &lt;enumeration value="ALLOCATION"/>
 *     &lt;enumeration value="FORCED DELIVERY"/>
 *     &lt;enumeration value="LIS"/>
 *     &lt;enumeration value="OTC"/>
 *     &lt;enumeration value="REGULAR"/>
 *     &lt;enumeration value="XETRA-ENLIGHT"/>
 *     &lt;enumeration value="GC"/>
 *     &lt;enumeration value="GCOP"/>
 *     &lt;enumeration value="GCOV"/>
 *     &lt;enumeration value="GCVA"/>
 *     &lt;enumeration value="SP"/>
 *     &lt;enumeration value="SPOP"/>
 *     &lt;enumeration value="SPOV"/>
 *     &lt;enumeration value="SPVA"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "trdTypTlType")
@XmlEnum
public enum TrdTypTlType {

    EXERCISE("EXERCISE"),
    ASSIGNMENT("ASSIGNMENT"),
    NOTIFICATION("NOTIFICATION"),
    ALLOCATION("ALLOCATION"),
    @XmlEnumValue("FORCED DELIVERY")
    FORCED_DELIVERY("FORCED DELIVERY"),
    LIS("LIS"),
    OTC("OTC"),
    REGULAR("REGULAR"),
    @XmlEnumValue("XETRA-ENLIGHT")
    XETRA_ENLIGHT("XETRA-ENLIGHT"),
    GC("GC"),
    GCOP("GCOP"),
    GCOV("GCOV"),
    GCVA("GCVA"),
    SP("SP"),
    SPOP("SPOP"),
    SPOV("SPOV"),
    SPVA("SPVA");
    private final String value;

    TrdTypTlType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TrdTypTlType fromValue(String v) {
        for (TrdTypTlType c: TrdTypTlType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
