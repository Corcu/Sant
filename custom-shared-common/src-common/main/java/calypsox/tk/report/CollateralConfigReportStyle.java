/*
 *
 * Copyright (c) ISBAN: Ingenieria de Software Bancario, S.L.
 * All rights reserved.
 *
 */
package calypsox.tk.report;

import calypsox.util.collateral.SantCollateralConfigUtil;
import com.calypso.apps.util.CalypsoTreeNode;
import com.calypso.apps.util.TreeList;
import com.calypso.infra.util.Util;
import com.calypso.tk.collateral.service.CollateralServiceException;
import com.calypso.tk.collateral.service.ServiceRegistry;
import com.calypso.tk.core.LegalEntity;
import com.calypso.tk.core.Log;
import com.calypso.tk.marketdata.MarginCallCreditRatingConfiguration;
import com.calypso.tk.refdata.CollateralConfig;
import com.calypso.tk.refdata.ConcentrationRule;
import com.calypso.tk.report.LegalEntityReportStyle;
import com.calypso.tk.report.ReportRow;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;

/*
 * This is an extension to the default Calypso report, adding few extra columns
 */
public class CollateralConfigReportStyle extends com.calypso.tk.report.CollateralConfigReportStyle {

    /**
     * Autogenerated serial UID.
     */
    private static final long serialVersionUID = 8286222040330862960L;

    public static final String PREFIX_STRING = "MarginCallConfig.";
    public static final String Sant_MCC_ConcentrationRules_ID = "Sant_MCC_ConcentrationRules_ID";
    public static final String Sant_MCC_ConcentrationRules_RuleNames = "Sant_MCC_ConcentrationRules_RuleNames";
    public static final String Sant_MCC_ConcentrationRules_Descriptions = "Sant_MCC_ConcentrationRules_Descriptions";
    public static final String Sant_MCC_ConcentrationRules_NumberOfRules = "Sant_MCC_ConcentrationRules_NumberOfRules";
    public static final String Sant_MCC_CreditRatingPO = "Sant_MCC_CreditRatingPO";
    public static final String Sant_MCC_CreditRatingLE = "Sant_MCC_CreditRatingLE";
    // GSM: 30/10/2013 - Added valuation agent type
    public static final String Sant_MCC_Valuation_Agent_Type = "Sant_MCC_Valuation_Agent_Type";
    public static final String EXCLUDE_FROM_OPTIMIZER = "Exclude From Optimizer";
    private static final Set<String> tradeLegalEntities = new HashSet();

    static {
        tradeLegalEntities.add("Legal Entity.");
        tradeLegalEntities.add("Processing Org.");
    }

    public CollateralConfigReportStyle() {
        super();
    }

    @Override
    public Object getColumnValue(ReportRow row, String columnName, Vector errors) {
        if (row == null) {
            return null;
        }
        CollateralConfig config = row.getProperty("MarginCallConfig");
        if (config == null) {
            return null;
        }
        String value = SantCollateralConfigUtil.overrideBookAndContractDirectionReportColumnValue(config, columnName, this);
        if (!Util.isEmpty(value)) {
            return value;
        }
        if (Sant_MCC_ConcentrationRules_ID.equals(columnName)) {
            if (!Util.isEmpty(config.getConcentrationRuleIds())) {
                return config.getConcentrationRuleIds();
            } else {
                return "";
            }
        } else if (Sant_MCC_ConcentrationRules_RuleNames.equals(columnName)) {
            try {
                setConcRulesInfo(config, row);
                return row.getProperty(Sant_MCC_ConcentrationRules_RuleNames);
            } catch (Exception e) {
                Log.error(this, e); //sonar
            }

        } else if (Sant_MCC_ConcentrationRules_Descriptions.equals(columnName)) {
            try {
                setConcRulesInfo(config, row);
                return row.getProperty(Sant_MCC_ConcentrationRules_Descriptions);
            } catch (Exception e) {
                Log.error(this, e); //sonar
            }
        } else if (Sant_MCC_ConcentrationRules_NumberOfRules.equals(columnName)) {
            try {
                setConcRulesInfo(config, row);
                return row.getProperty(Sant_MCC_ConcentrationRules_NumberOfRules);
            } catch (Exception e) {
                Log.error(this, e); //sonar
            }
        } else if (Sant_MCC_CreditRatingPO.equals(columnName)) {
            int poRatingConfigId = config.getPoRatingsConfigId();
            if (poRatingConfigId != 0) {
                try {
                    MarginCallCreditRatingConfiguration poRatingCredit = ServiceRegistry.getDefault().getCollateralServer().getMarginCallCreditRatingById(poRatingConfigId);
                    return poRatingCredit.getName();
                } catch (CollateralServiceException e) {
                    Log.error(this, e);
                }
            }
        } else if (Sant_MCC_CreditRatingLE.equals(columnName)) {
            int leRatingConfigId = config.getLeRatingsConfigId();
            if (leRatingConfigId != 0) {
                try {
                    MarginCallCreditRatingConfiguration leRatingCredit = ServiceRegistry.getDefault().getCollateralServer().getMarginCallCreditRatingById(leRatingConfigId);
                    return leRatingCredit.getName();
                } catch (CollateralServiceException e) {
                    Log.error(this, e);
                }
            }
        }
        if (Sant_MCC_Valuation_Agent_Type.equals(columnName)) {
            if ((config != null) && (config.getValuationAgentType() != null)
                    && !config.getValuationAgentType().isEmpty()) {

                return config.getValuationAgentType().trim();
            } else {
                return "";
            }
        }
        if (EXCLUDE_FROM_OPTIMIZER.equals(columnName)) {
            return config.isExcludeFromOptimizer();
        }

        return getValue(row, columnName, errors);
    }

    private Object getValue(ReportRow row, String columnName, Vector errors) {
        Object value = super.getColumnValue(row, columnName, errors);
        if (value == null) {
            for (Object lePrefix : tradeLegalEntities) {
                String prefix;
                LegalEntityReportStyle leReportStyle = this.getLegalEntityStyle();
                if (!isLegalEntityColumn(prefix = (String) lePrefix, columnName)) {
                }
                LegalEntity le = CollateralConfigReportStyle.getLegalEntity(prefix,
                        (CollateralConfig) row.getProperty("MarginCallConfig"));
                if (le == null) {
                    return "";
                }
                value = leReportStyle.getColumnValue(le, prefix, row, columnName, errors);
            }
        }
        return value;
    }


    /**
     * @return TreeList of CollateralConfig, as child node being the sum of core
     * columns + custom columns
     */
    public TreeList getNonInheritedTreeList() {
        com.calypso.tk.report.CollateralConfigReportStyle style = new com.calypso.tk.report.CollateralConfigReportStyle();
        TreeList treeList = style.getNonInheritedTreeList();
        treeList.add(Sant_MCC_ConcentrationRules_ID);
        treeList.add(Sant_MCC_ConcentrationRules_RuleNames);
        treeList.add(Sant_MCC_ConcentrationRules_Descriptions);
        treeList.add(Sant_MCC_ConcentrationRules_NumberOfRules);
        treeList.add(Sant_MCC_Valuation_Agent_Type);
        treeList.add(EXCLUDE_FROM_OPTIMIZER);

        return treeList;
    }

    /**
     * @return TreeList of CollateralConfig
     */
    @Override
    public TreeList getTreeList() {
        final TreeList treeList = super.getTreeList();
        treeList.add(Sant_MCC_ConcentrationRules_ID);
        treeList.add(Sant_MCC_ConcentrationRules_RuleNames);
        treeList.add(Sant_MCC_ConcentrationRules_Descriptions);
        treeList.add(Sant_MCC_ConcentrationRules_NumberOfRules);
        treeList.add(Sant_MCC_Valuation_Agent_Type);
        treeList.add(EXCLUDE_FROM_OPTIMIZER);
        return treeList;
    }

    private void setConcRulesInfo(CollateralConfig config, ReportRow row) throws Exception {
        List<Integer> concentrationRuleIds = config.getConcentrationRuleIds();
        if (Util.isEmpty(concentrationRuleIds)
                || !Util.isEmpty((String) row.getProperty(Sant_MCC_ConcentrationRules_NumberOfRules))) {
            return;
        }

        String names = "";
        String descs = "";
        // int ruleCount = 0;

        List<ConcentrationRule> rules = ServiceRegistry.getDefault().getCollateralDataServer()
                .loadConcentrationRule(concentrationRuleIds);
        for (ConcentrationRule rule : rules) {
            if (!Util.isEmpty(names)) {
                names += ",";
            }
            names += rule.getName();

            if (!Util.isEmpty(descs)) {
                descs += ",";
            }
            descs += rule.getDescription();
        }

        row.setProperty(Sant_MCC_ConcentrationRules_RuleNames, names);
        row.setProperty(Sant_MCC_ConcentrationRules_Descriptions, descs);
        row.setProperty(Sant_MCC_ConcentrationRules_NumberOfRules, rules.size() + "");
    }

    /**
     * AAP MIG 14.4
     * Checks both MarginCallConfig and LE/PO prefix
     */
    @Override
    public boolean isMarginCallConfigColumn(String prefix, String columnId) {
        boolean value = false;
        String realName = getRealColumnName(PREFIX_STRING, columnId);
        if (realName == null)
            return value;
        value = getNonInheritedColumns(realName);
        if (!value) {
            for (Object prefixLe : tradeLegalEntities) {
                value = isLegalEntityColumn(prefixLe.toString(), columnId);
            }
        }
        return value;
    }

    // AAP TO BE REFACTORED
    public boolean isLegalEntityColumn(String prefix, String columnId) {
        String realName = getRealColumnName(prefix, columnId);
        if (realName == null)
            return false;
        return getNonInheritedColumns(realName);
    }

    public boolean getNonInheritedColumns(String realName) {
        CalypsoTreeNode node = ((CalypsoTreeNode) getNonInheritedTreeList().getRoot()).getChild(realName);

        return true;

    }

}